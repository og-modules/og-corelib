name: Release Module

on:
    workflow_dispatch:

    push:
        branches: [main]

    pull_request:
        branches: [main]

env:
    node_version: 22

jobs:
    set_version:
        runs-on: ubuntu-latest

        outputs:
            previous: ${{ steps.versions.outputs.previous }}
            current: ${{ steps.versions.outputs.current }}
            should_release: ${{ steps.versions.outputs.previous != steps.versions.outputs.current }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: 'Get Previous tag'
              id: previoustag
              uses: 'WyriHaximus/github-action-get-previous-tag@v1'

            - name: Get version from module.json
              id: version
              uses: notiz-dev/github-action-json-property@release
              with:
                  path: 'module.json'
                  prop_path: 'version'

            - name: Set versions variables
              id: versions
              run: |
                  previous="${{ steps.previoustag.outputs.tag }}"
                  current="${{ steps.version.outputs.prop }}"

                  if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                      sha_short=$(git rev-parse --short "$GITHUB_SHA")
                      current="${current}-${sha_short}"
                  fi

                  echo "::set-output name=previous::$previous"
                  echo "::set-output name=current::$current"

            - name: Output values
              run: |
                  echo "Previous: ${{ steps.versions.outputs.previous }}"
                  echo "Current: ${{ steps.versions.outputs.current }}"
                  echo "Should release? ${{ steps.versions.outputs.previous != steps.versions.outputs.current }}"

    build:
        needs: set_version
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.node_version }}
                  registry-url: 'https://registry.npmjs.org'
                  scope: '@og-modules'

            - name: Replace the package.json version with the module.json one
              uses: microsoft/variable-substitution@v1
              with:
                  files: 'package.json'
              env:
                  version: ${{ needs.set_version.outputs.current }}

            - name: Install dependencies
              run: npm i

            - name: Build the module
              run: npm run build

            - name: Upload dist directory as artifact
              uses: actions/upload-artifact@v3
              with:
                  name: dist
                  path: dist

    check_member:
        runs-on: ubuntu-latest
        outputs:
            is_member: ${{ steps.check_member.outputs.is_member }}
        steps:
            - name: Check if PR author is a repository member
              id: check_member
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  ACTOR: ${{ github.actor }}
                  REPO: ${{ github.repository }}
              run: |
                  # Check if the actor (PR author) is a member of the repository
                  response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                            "https://api.github.com/repos/$REPO/collaborators/$ACTOR/permission")

                  # Parse the JSON response to check if the user has any permission
                  if [[ "$(echo "$response" | jq -r .permission)" == "none" || -z "$(echo "$response" | jq -r .permission)" ]]; then
                    echo "User is not a member of the repository. Skipping workflow."
                    echo "::set-output name=is_member::false"
                  else
                    echo "User is a repository member."
                    echo "::set-output name=is_member::true"
                  fi

    publish_to_npm:
        needs: [build, check_member, set_version]
        runs-on: ubuntu-latest
        if: ${{ needs.set_version.outputs.should_release == 'true' && needs.check_member.outputs.is_member == 'true' }}
        permissions:
            contents: write

        steps:
            - name: Download dist artifact
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: .

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.node_version }}
                  registry-url: 'https://registry.npmjs.org'
                  scope: '@og-modules'

            - name: Publish to the NPM registry
              run: npm publish --access=public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    release_to_github:
        needs: [build, check_member, set_version]
        runs-on: ubuntu-latest
        if: ${{ needs.set_version.outputs.should_release == 'true' && needs.check_member.outputs.is_member == 'true' }}
        permissions:
            contents: write

        steps:
            - name: Download dist artifact
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: .

            - name: Create Module Archive from the dist directory
              run: zip -r ../module.zip .

            - name: Create the GitHub release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ needs.build.outputs.current_version }}
                  prerelease: ${{ github.event_name == 'pull_request' }}
                  files: |
                      module.zip
                      module.json
